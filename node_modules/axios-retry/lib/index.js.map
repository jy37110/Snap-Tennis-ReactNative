{"version":3,"sources":["../es/index.js"],"names":[],"mappings":";;;;;kBA6BwB,U;;AA7BxB;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2Be,SAAS,UAAT,CAAoB,KAApB,EAGP;AAAA,mEAAJ,EAAI;;AAAA,0BAFN,OAEM;AAAA,MAFN,OAEM,gCAFI,CAEJ;AAAA,iCADN,cACM;AAAA,MADN,cACM,uCADW;AAAA,WAAS,CAAC,MAAM,QAAhB;AAAA,GACX;;AACN,QAAM,YAAN,CAAmB,QAAnB,CAA4B,GAA5B,CAAgC,IAAhC,EAAsC,iBAAS;AAC7C,QAAM,SAAS,MAAM,MAArB;;AAEA;AACA,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,QAAQ,MAAR,CAAe,KAAf,CAAP;AACD;;AAED,WAAO,UAAP,GAAoB,OAAO,UAAP,IAAqB,CAAzC;;AAEA,QAAM,cAAc,eAAe,KAAf,KACf,MAAM,IAAN,KAAe,cADA,IAEf,OAAO,UAAP,GAAoB,OAFL,IAGf,8BAAe,KAAf,CAHL;;AAKA,QAAI,WAAJ,EAAiB;AACf,aAAO,UAAP;;AAEA;AACA;AACA,UAAI,MAAM,QAAN,CAAe,KAAf,KAAyB,OAAO,KAApC,EAA2C;AACzC,eAAO,OAAO,KAAd;AACD;AACD,UAAI,MAAM,QAAN,CAAe,SAAf,KAA6B,OAAO,SAAxC,EAAmD;AACjD,eAAO,OAAO,SAAd;AACD;AACD,UAAI,MAAM,QAAN,CAAe,UAAf,KAA8B,OAAO,UAAzC,EAAqD;AACnD,eAAO,OAAO,UAAd;AACD;;AAED,aAAO,MAAM,MAAN,CAAP;AACD;;AAED,WAAO,QAAQ,MAAR,CAAe,KAAf,CAAP;AACD,GAlCD;AAmCD","file":"index.js","sourcesContent":["import isRetryAllowed from 'is-retry-allowed';\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [options]\n * @param {number} [options.retries=3] Number of retries\n */\nexport default function axiosRetry(axios, {\n  retries = 3,\n  retryCondition = error => !error.response\n} = {}) {\n  axios.interceptors.response.use(null, error => {\n    const config = error.config;\n\n    // If we have no information to retry the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    config.retryCount = config.retryCount || 0;\n\n    const shouldRetry = retryCondition(error)\n      && error.code !== 'ECONNABORTED'\n      && config.retryCount < retries\n      && isRetryAllowed(error);\n\n    if (shouldRetry) {\n      config.retryCount++;\n\n      // Axios fails merging this configuration to the default configuration because it has an issue\n      // with circular structures\n      if (axios.defaults.agent === config.agent) {\n        delete config.agent;\n      }\n      if (axios.defaults.httpAgent === config.httpAgent) {\n        delete config.httpAgent;\n      }\n      if (axios.defaults.httpsAgent === config.httpsAgent) {\n        delete config.httpsAgent;\n      }\n\n      return axios(config);\n    }\n\n    return Promise.reject(error);\n  });\n}\n"]}